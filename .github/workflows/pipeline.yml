name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fastfood-infra-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Verifica se as variáveis estão definidas
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ] || [ -z "$IMAGE_TAG" ]; then
            echo "❌ Error: Missing required environment variables"
            exit 1
          fi
          
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update ECS Task Definition
        id: update-task-def
        run: |
          # Constrói a URL completa da imagem
          FULL_IMAGE_URL="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Full image URL: $FULL_IMAGE_URL"
          
          # Atualiza a Task Definition para usar a nova imagem
          aws ecs describe-task-definition \
            --task-definition fastfood-infra-app \
            --region us-east-1 \
            --query 'taskDefinition' > current-task-def.json
          
          # Verifica se o arquivo foi criado corretamente
          if [ ! -f current-task-def.json ]; then
            echo "❌ Error: Failed to get current task definition"
            exit 1
          fi
          
          # Mostra a imagem atual
          CURRENT_IMAGE=$(jq -r '.containerDefinitions[0].image' current-task-def.json)
          echo "Current image: $CURRENT_IMAGE"
          
          # Cria nova versão da Task Definition com a nova imagem
          jq --arg IMAGE "$FULL_IMAGE_URL" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            current-task-def.json > new-task-def.json
          
          # Verifica se o novo arquivo foi criado
          if [ ! -f new-task-def.json ]; then
            echo "❌ Error: Failed to create new task definition"
            exit 1
          fi
          
          # Mostra a nova imagem que será usada
          NEW_IMAGE=$(jq -r '.containerDefinitions[0].image' new-task-def.json)
          echo "New image: $NEW_IMAGE"
          
          # Registra nova Task Definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --region us-east-1 \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS Service
        run: |
          # Atualiza o service para usar a nova Task Definition
          NEW_TASK_DEF_ARN="${{ steps.update-task-def.outputs.NEW_TASK_DEF_ARN }}"
          
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "❌ Error: NEW_TASK_DEF_ARN is empty"
            exit 1
          fi
          
          echo "Using Task Definition: $NEW_TASK_DEF_ARN"
          
          aws ecs update-service \
            --cluster fastfood-infra-cluster \
            --service fastfood-infra-service \
            --task-definition "$NEW_TASK_DEF_ARN" \
            --region us-east-1
          echo "ECS service update initiated with new Task Definition"

      - name: Wait for deployment to complete
        run: |
          # Aguarda o deployment completar
          aws ecs wait services-stable \
            --cluster fastfood-infra-cluster \
            --services fastfood-infra-service \
            --region us-east-1
          echo "ECS service deployment completed"

