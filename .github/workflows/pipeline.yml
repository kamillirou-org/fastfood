name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fastfood-infra-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Run tests
        run: mvn test

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Verifica se as vari√°veis est√£o definidas
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ] || [ -z "$IMAGE_TAG" ]; then
            echo "‚ùå Error: Missing required environment variables"
            exit 1
          fi
          
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update ECS Task Definition
        id: update-task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Verifica se as vari√°veis est√£o definidas
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ] || [ -z "$IMAGE_TAG" ]; then
            echo "‚ùå Error: Missing required environment variables"
            exit 1
          fi
          
          # Constr√≥i a URL completa da imagem
          FULL_IMAGE_URL="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Full image URL: $FULL_IMAGE_URL"
          
          # Atualiza a Task Definition para usar a nova imagem
          aws ecs describe-task-definition \
            --task-definition fastfood-infra-app \
            --region us-east-1 \
            --query 'taskDefinition' > current-task-def.json
          
          # Verifica se o arquivo foi criado corretamente
          if [ ! -f current-task-def.json ]; then
            echo "‚ùå Error: Failed to get current task definition"
            exit 1
          fi
          
          # Mostra a imagem atual
          CURRENT_IMAGE=$(jq -r '.containerDefinitions[0].image' current-task-def.json)
          echo "Current image: $CURRENT_IMAGE"
          
          # Cria nova vers√£o da Task Definition com a nova imagem
          jq --arg IMAGE "$FULL_IMAGE_URL" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' \
            current-task-def.json > new-task-def.json
          
          # Verifica se o novo arquivo foi criado
          if [ ! -f new-task-def.json ]; then
            echo "‚ùå Error: Failed to create new task definition"
            exit 1
          fi
          
          # Mostra a nova imagem que ser√° usada
          NEW_IMAGE=$(jq -r '.containerDefinitions[0].image' new-task-def.json)
          echo "New image: $NEW_IMAGE"
          
          # Registra nova Task Definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --region us-east-1 \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS Service
        run: |
          # Atualiza o service para usar a nova Task Definition
          NEW_TASK_DEF_ARN="${{ steps.update-task-def.outputs.NEW_TASK_DEF_ARN }}"
          
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "‚ùå Error: NEW_TASK_DEF_ARN is empty"
            exit 1
          fi
          
          echo "Using Task Definition: $NEW_TASK_DEF_ARN"
          
          aws ecs update-service \
            --cluster fastfood-infra-cluster \
            --service fastfood-infra-service \
            --task-definition "$NEW_TASK_DEF_ARN" \
            --region us-east-1
          echo "ECS service update initiated with new Task Definition"

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for ECS service to stabilize..."
          
          # Aguarda com timeout mais longo e melhor diagn√≥stico
          timeout 600 aws ecs wait services-stable \
            --cluster fastfood-infra-cluster \
            --services fastfood-infra-service \
            --region us-east-1 || {
            
            echo "‚ö†Ô∏è Service did not stabilize within timeout. Checking status..."
            
            # Verifica o status do service
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster fastfood-infra-cluster \
              --services fastfood-infra-service \
              --region us-east-1 \
              --query 'services[0].status' \
              --output text)
            
            echo "Service status: $SERVICE_STATUS"
            
            # Lista os deployments
            aws ecs describe-services \
              --cluster fastfood-infra-cluster \
              --services fastfood-infra-service \
              --region us-east-1 \
              --query 'services[0].deployments[*].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount,CreatedAt:createdAt}' \
              --output table
            
            # Lista as tasks
            TASK_ARNS=$(aws ecs list-tasks \
              --cluster fastfood-infra-cluster \
              --service-name fastfood-infra-service \
              --region us-east-1 \
              --query 'taskArns' \
              --output text)
            
            if [ "$TASK_ARNS" != "None" ] && [ "$TASK_ARNS" != "" ]; then
              echo "üìã Checking task details..."
              aws ecs describe-tasks \
                --cluster fastfood-infra-cluster \
                --tasks $TASK_ARNS \
                --region us-east-1 \
                --query 'tasks[*].{TaskArn:taskArn,LastStatus:lastStatus,DesiredStatus:desiredStatus,HealthStatus:healthStatus,CreatedAt:createdAt}' \
                --output table
              
              # Verifica logs das tasks se poss√≠vel
              for TASK_ARN in $TASK_ARNS; do
                echo "üîç Checking logs for task: $TASK_ARN"
                aws logs describe-log-groups \
                  --log-group-name-prefix "/ecs/fastfood" \
                  --region us-east-1 \
                  --query 'logGroups[0].logGroupName' \
                  --output text 2>/dev/null || echo "No log groups found"
              done
            fi
            
            echo "‚ùå Deployment did not complete successfully"
            exit 1
          }
          
          echo "‚úÖ ECS service deployment completed successfully"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment status..."
          
          # Aguarda um pouco mais para garantir que a aplica√ß√£o esteja pronta
          sleep 30
          
          # Verifica o status do deployment
          DEPLOYMENT_STATUS=$(aws ecs describe-services \
            --cluster fastfood-infra-cluster \
            --services fastfood-infra-service \
            --region us-east-1 \
            --query 'services[0].deployments[0].status' \
            --output text)
          
          echo "Deployment status: $DEPLOYMENT_STATUS"
          
          if [ "$DEPLOYMENT_STATUS" = "PRIMARY" ]; then
            echo "‚úÖ Deployment successful - containers updated with new image"
          else
            echo "‚ùå Deployment failed or still in progress"
            
            # Mostra detalhes adicionais em caso de falha
            aws ecs describe-services \
              --cluster fastfood-infra-cluster \
              --services fastfood-infra-service \
              --region us-east-1 \
              --query 'services[0].deployments[*].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount,CreatedAt:createdAt}' \
              --output table
            
            exit 1
          fi

      - name: Health check application
        run: |
          echo "üè• Checking application health..."
          
          # Obt√©m o ALB endpoint
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --region us-east-1 \
            --query 'LoadBalancers[?contains(LoadBalancerName, `fastfood`)].DNSName' \
            --output text)
          
          if [ "$ALB_DNS" != "None" ] && [ "$ALB_DNS" != "" ]; then
            echo "ALB DNS: $ALB_DNS"
            
            # Testa o health check
            HEALTH_URL="http://$ALB_DNS/health"
            echo "Testing health endpoint: $HEALTH_URL"
            
            # Aguarda a aplica√ß√£o estar pronta
            for i in {1..10}; do
              if curl -f -s "$HEALTH_URL" > /dev/null; then
                echo "‚úÖ Application is healthy and responding"
                break
              else
                echo "‚è≥ Attempt $i/10: Application not ready yet, waiting..."
                sleep 10
              fi
            done
            
            # √öltima tentativa
            if ! curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚ö†Ô∏è Application health check failed, but deployment may still be successful"
              echo "Check CloudWatch logs for more details"
            fi
          else
            echo "‚ö†Ô∏è Could not find ALB DNS, skipping health check"
          fi

